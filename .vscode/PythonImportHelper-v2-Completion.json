[
    {
        "label": "CELL_TYPES",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "DIRECTIONS",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "MOVEMENT_DIRECTIONS",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "CELL_SIZE",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "DIRECTIONS",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "DIRECTIONS",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "DIRECTIONS",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "DIRECTIONS",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "CELL_TYPES",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils.enums",
        "description": "utils.enums",
        "isExtraImport": true,
        "detail": "utils.enums",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "utils.add_tuple",
        "description": "utils.add_tuple",
        "isExtraImport": true,
        "detail": "utils.add_tuple",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "utils.add_tuple",
        "description": "utils.add_tuple",
        "isExtraImport": true,
        "detail": "utils.add_tuple",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "utils.add_tuple",
        "description": "utils.add_tuple",
        "isExtraImport": true,
        "detail": "utils.add_tuple",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "utils.add_tuple",
        "description": "utils.add_tuple",
        "isExtraImport": true,
        "detail": "utils.add_tuple",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "utils.add_tuple",
        "description": "utils.add_tuple",
        "isExtraImport": true,
        "detail": "utils.add_tuple",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "utils.add_tuple",
        "description": "utils.add_tuple",
        "isExtraImport": true,
        "detail": "utils.add_tuple",
        "documentation": {}
    },
    {
        "label": "get_quads",
        "importPath": "utils.get_quads",
        "description": "utils.get_quads",
        "isExtraImport": true,
        "detail": "utils.get_quads",
        "documentation": {}
    },
    {
        "label": "get_pacman_quads",
        "importPath": "utils.get_quads",
        "description": "utils.get_quads",
        "isExtraImport": true,
        "detail": "utils.get_quads",
        "documentation": {}
    },
    {
        "label": "get_ghost_quads",
        "importPath": "utils.get_quads",
        "description": "utils.get_quads",
        "isExtraImport": true,
        "detail": "utils.get_quads",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "subtract_tuple",
        "importPath": "utils.subtract_tuple",
        "description": "utils.subtract_tuple",
        "isExtraImport": true,
        "detail": "utils.subtract_tuple",
        "documentation": {}
    },
    {
        "label": "strategy_benchmark",
        "importPath": "utils.benchmark",
        "description": "utils.benchmark",
        "isExtraImport": true,
        "detail": "utils.benchmark",
        "documentation": {}
    },
    {
        "label": "strategy_benchmark",
        "importPath": "utils.benchmark",
        "description": "utils.benchmark",
        "isExtraImport": true,
        "detail": "utils.benchmark",
        "documentation": {}
    },
    {
        "label": "strategy_benchmark",
        "importPath": "utils.benchmark",
        "description": "utils.benchmark",
        "isExtraImport": true,
        "detail": "utils.benchmark",
        "documentation": {}
    },
    {
        "label": "strategy_benchmark",
        "importPath": "utils.benchmark",
        "description": "utils.benchmark",
        "isExtraImport": true,
        "detail": "utils.benchmark",
        "documentation": {}
    },
    {
        "label": "strategy_benchmark",
        "importPath": "utils.benchmark",
        "description": "utils.benchmark",
        "isExtraImport": true,
        "detail": "utils.benchmark",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "Map",
        "importPath": "models.Map",
        "description": "models.Map",
        "isExtraImport": true,
        "detail": "models.Map",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tracemalloc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tracemalloc",
        "description": "tracemalloc",
        "detail": "tracemalloc",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Ghost",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Ghost",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Ghost",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Ghost",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Ghost",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "importPath": "models.MovingObject",
        "description": "models.MovingObject",
        "isExtraImport": true,
        "detail": "models.MovingObject",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "PygameRenderer",
        "importPath": "utils.pygame_renderer",
        "description": "utils.pygame_renderer",
        "isExtraImport": true,
        "detail": "utils.pygame_renderer",
        "documentation": {}
    },
    {
        "label": "PygameRenderer",
        "importPath": "utils.pygame_renderer",
        "description": "utils.pygame_renderer",
        "isExtraImport": true,
        "detail": "utils.pygame_renderer",
        "documentation": {}
    },
    {
        "label": "load",
        "importPath": "utils.load_map",
        "description": "utils.load_map",
        "isExtraImport": true,
        "detail": "utils.load_map",
        "documentation": {}
    },
    {
        "label": "load",
        "importPath": "utils.load_map",
        "description": "utils.load_map",
        "isExtraImport": true,
        "detail": "utils.load_map",
        "documentation": {}
    },
    {
        "label": "utils.game_logic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils.game_logic",
        "description": "utils.game_logic",
        "detail": "utils.game_logic",
        "documentation": {}
    },
    {
        "label": "bfs",
        "importPath": "moving_strategies.bfs",
        "description": "moving_strategies.bfs",
        "isExtraImport": true,
        "detail": "moving_strategies.bfs",
        "documentation": {}
    },
    {
        "label": "bfs",
        "importPath": "moving_strategies.bfs",
        "description": "moving_strategies.bfs",
        "isExtraImport": true,
        "detail": "moving_strategies.bfs",
        "documentation": {}
    },
    {
        "label": "iddfs",
        "importPath": "moving_strategies.iddfs",
        "description": "moving_strategies.iddfs",
        "isExtraImport": true,
        "detail": "moving_strategies.iddfs",
        "documentation": {}
    },
    {
        "label": "iddfs",
        "importPath": "moving_strategies.iddfs",
        "description": "moving_strategies.iddfs",
        "isExtraImport": true,
        "detail": "moving_strategies.iddfs",
        "documentation": {}
    },
    {
        "label": "ucs",
        "importPath": "moving_strategies.ucs",
        "description": "moving_strategies.ucs",
        "isExtraImport": true,
        "detail": "moving_strategies.ucs",
        "documentation": {}
    },
    {
        "label": "ucs",
        "importPath": "moving_strategies.ucs",
        "description": "moving_strategies.ucs",
        "isExtraImport": true,
        "detail": "moving_strategies.ucs",
        "documentation": {}
    },
    {
        "label": "a_star",
        "importPath": "moving_strategies.a_star",
        "description": "moving_strategies.a_star",
        "isExtraImport": true,
        "detail": "moving_strategies.a_star",
        "documentation": {}
    },
    {
        "label": "a_star",
        "importPath": "moving_strategies.a_star",
        "description": "moving_strategies.a_star",
        "isExtraImport": true,
        "detail": "moving_strategies.a_star",
        "documentation": {}
    },
    {
        "label": "pygame_user_input",
        "importPath": "moving_strategies.pygame_user_input",
        "description": "moving_strategies.pygame_user_input",
        "isExtraImport": true,
        "detail": "moving_strategies.pygame_user_input",
        "documentation": {}
    },
    {
        "label": "pygame_user_input",
        "importPath": "moving_strategies.pygame_user_input",
        "description": "moving_strategies.pygame_user_input",
        "isExtraImport": true,
        "detail": "moving_strategies.pygame_user_input",
        "documentation": {}
    },
    {
        "label": "Map",
        "kind": 6,
        "importPath": "src.models.Map",
        "description": "src.models.Map",
        "peekOfCode": "class Map:\n  def __init__(self, map: list[str]):\n    self.__map = [list(row) for row in map]\n    self.N = len(map)\n    self.M = len(map[0])\n  def contains_cell(self, cell: tuple[int, int]) -> bool:\n    x, y = cell\n    return 0 <= x < self.N and 0 <= y < self.M\n  def is_wall(self, cell: tuple[int, int]) -> bool:\n    if not self.contains_cell(cell):",
        "detail": "src.models.Map",
        "documentation": {}
    },
    {
        "label": "MovingObject",
        "kind": 6,
        "importPath": "src.models.MovingObject",
        "description": "src.models.MovingObject",
        "peekOfCode": "class MovingObject:\n  def __init__(self, initial_position: tuple[int, int], moving_strategy):\n    self.position = initial_position\n    self.moving_strategy = moving_strategy\n    self.visual_x = initial_position[1] * CELL_SIZE\n    self.visual_y = initial_position[0] * CELL_SIZE\n    self.target_position = initial_position\n    self.speed = 5\n    self.is_moving = False\nclass Pacman(MovingObject):",
        "detail": "src.models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Pacman",
        "kind": 6,
        "importPath": "src.models.MovingObject",
        "description": "src.models.MovingObject",
        "peekOfCode": "class Pacman(MovingObject):\n  def __init__(self, initial_position: tuple[int, int], moving_strategy):\n    super().__init__(initial_position, moving_strategy)\n    self.lives = 3\n    self.score = 0\n    self.animations = get_pacman_quads(quads)\n    self.frame = 0\n    self.time = pygame.time.get_ticks()\n    self.collapse = 30\n    self.direction = MOVEMENT_DIRECTIONS['RIGHT']",
        "detail": "src.models.MovingObject",
        "documentation": {}
    },
    {
        "label": "Ghost",
        "kind": 6,
        "importPath": "src.models.MovingObject",
        "description": "src.models.MovingObject",
        "peekOfCode": "class Ghost(MovingObject):\n  def __init__(self, initial_position: tuple[int, int], moving_strategy, name):\n    super().__init__(initial_position, moving_strategy)\n    self.name = name\n    self.animations = get_ghost_quads(quads)[name]\n    self.direction = MOVEMENT_DIRECTIONS['RIGHT']\n    self.speed = 2\n  def get_direction(self, new_position):\n    delta = subtract_tuple(new_position, self.position)\n    if delta[1] > 0:",
        "detail": "src.models.MovingObject",
        "documentation": {}
    },
    {
        "label": "sprite_sheet",
        "kind": 5,
        "importPath": "src.models.MovingObject",
        "description": "src.models.MovingObject",
        "peekOfCode": "sprite_sheet = pygame.image.load('assets/sprites/sprite_sheet.png')\nquads = get_quads(sprite_sheet)\nclass MovingObject:\n  def __init__(self, initial_position: tuple[int, int], moving_strategy):\n    self.position = initial_position\n    self.moving_strategy = moving_strategy\n    self.visual_x = initial_position[1] * CELL_SIZE\n    self.visual_y = initial_position[0] * CELL_SIZE\n    self.target_position = initial_position\n    self.speed = 5",
        "detail": "src.models.MovingObject",
        "documentation": {}
    },
    {
        "label": "quads",
        "kind": 5,
        "importPath": "src.models.MovingObject",
        "description": "src.models.MovingObject",
        "peekOfCode": "quads = get_quads(sprite_sheet)\nclass MovingObject:\n  def __init__(self, initial_position: tuple[int, int], moving_strategy):\n    self.position = initial_position\n    self.moving_strategy = moving_strategy\n    self.visual_x = initial_position[1] * CELL_SIZE\n    self.visual_y = initial_position[0] * CELL_SIZE\n    self.target_position = initial_position\n    self.speed = 5\n    self.is_moving = False",
        "detail": "src.models.MovingObject",
        "documentation": {}
    },
    {
        "label": "a_star",
        "kind": 2,
        "importPath": "src.moving_strategies.a_star",
        "description": "src.moving_strategies.a_star",
        "peekOfCode": "def a_star(position, pacman_pos, maze: Map, restricted_cells: list[tuple[int, int]]) -> tuple[tuple[int, int], int]:\n  def heuristic(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n  open_set = []\n  heappush(open_set, (0, position))\n  came_from = {}\n  g_score = {position: 0}\n  f_score = {position: heuristic(position, pacman_pos)}\n  expanded_nodes = 0  \n  closed_set = set() ",
        "detail": "src.moving_strategies.a_star",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "src.moving_strategies.bfs",
        "description": "src.moving_strategies.bfs",
        "peekOfCode": "def bfs(position, pacman_pos, maze: Map, restricted_cells: list[tuple[int, int]]) -> tuple[tuple[int, int], int]:\n  n_expanded_nodes = 0  \n  q = queue.Queue()\n  prev = {}\n  q.put(position)\n  prev[position] = position\n  while not q.empty():\n    current = q.get()\n    n_expanded_nodes += 1\n    found = False",
        "detail": "src.moving_strategies.bfs",
        "documentation": {}
    },
    {
        "label": "iddfs",
        "kind": 2,
        "importPath": "src.moving_strategies.iddfs",
        "description": "src.moving_strategies.iddfs",
        "peekOfCode": "def iddfs(position, pacman_pos, maze: Map, restricted_cells: list[tuple[int, int]]) -> tuple[tuple[int, int], int]:\n  n_expanded_nodes = 0\n  def dfs(current, met_at, depth, limit) -> tuple[int, int]:\n    if depth > limit:\n      return None\n    nonlocal n_expanded_nodes\n    n_expanded_nodes += 1\n    for d in DIRECTIONS.values():\n      new_cell = add(current, d)\n      if not maze.contains_cell(new_cell) or met_at.get(new_cell, 1e9) <= depth + 1 or maze.is_wall(new_cell):",
        "detail": "src.moving_strategies.iddfs",
        "documentation": {}
    },
    {
        "label": "pygame_user_input",
        "kind": 2,
        "importPath": "src.moving_strategies.pygame_user_input",
        "description": "src.moving_strategies.pygame_user_input",
        "peekOfCode": "def pygame_user_input(position, map, keys=None):\n    if keys is None:\n        return position\n    new_position = position\n    if keys[pygame.K_UP] or keys[pygame.K_w]:\n        new_position = add(position, DIRECTIONS['UP'])\n    elif keys[pygame.K_DOWN] or keys[pygame.K_s]:\n        new_position = add(position, DIRECTIONS['DOWN'])\n    elif keys[pygame.K_LEFT] or keys[pygame.K_a]:\n        new_position = add(position, DIRECTIONS['LEFT'])",
        "detail": "src.moving_strategies.pygame_user_input",
        "documentation": {}
    },
    {
        "label": "random_move",
        "kind": 2,
        "importPath": "src.moving_strategies.random",
        "description": "src.moving_strategies.random",
        "peekOfCode": "def random_move(position, pacman_pos, maze: Map, restricted_cells: list[tuple[int, int]]) -> tuple[tuple[int, int], int]:\n  available_moves = []\n  n_expanded_nodes = 1  # Only expanding current node\n  for d in DIRECTIONS.values():\n    new_cell = add(position, d)\n    if not maze.contains_cell(new_cell) or maze.is_wall(new_cell):\n      continue\n    if new_cell in restricted_cells and new_cell != position:\n      continue\n    available_moves.append(new_cell)",
        "detail": "src.moving_strategies.random",
        "documentation": {}
    },
    {
        "label": "ucs",
        "kind": 2,
        "importPath": "src.moving_strategies.ucs",
        "description": "src.moving_strategies.ucs",
        "peekOfCode": "def ucs(position, pacman_pos, maze: Map, restricted_cells: list[tuple[int, int]]) -> tuple[tuple[int, int], int]:\n  open_set = []\n  heappush(open_set, (0, position))\n  came_from = {}\n  g_score = {position: 0}\n  expanded_nodes = 0\n  closed_set = set()\n  while open_set:\n    cost, current = heappop(open_set)\n    if current in closed_set:",
        "detail": "src.moving_strategies.ucs",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 2,
        "importPath": "src.moving_strategies.user_input",
        "description": "src.moving_strategies.user_input",
        "peekOfCode": "def user_input(position: tuple[int, int], maze: Map) -> tuple[int, int]:\n  moves = {\n      \"w\": (-1, 0),  # Up\n      \"s\": (1, 0),   # Down\n      \"a\": (0, -1),  # Left\n      \"d\": (0, 1)    # Right\n  }\n  print(\"Enter move (w: up, s: down, a: left, d: right): \", end=\"\")\n  user_move = input().strip().lower()\n  if user_move not in moves:",
        "detail": "src.moving_strategies.user_input",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "src.utils.add_tuple",
        "description": "src.utils.add_tuple",
        "peekOfCode": "def add(a: tuple[int, int], b: tuple[int, int]) -> tuple[int, int]:\n    return (a[0] + b[0], a[1] + b[1])",
        "detail": "src.utils.add_tuple",
        "documentation": {}
    },
    {
        "label": "strategy_benchmark",
        "kind": 2,
        "importPath": "src.utils.benchmark",
        "description": "src.utils.benchmark",
        "peekOfCode": "def strategy_benchmark(func):\n  @wraps(func)\n  def wrapper(*args, **kwargs):\n    tracemalloc.start()\n    start_time = time.perf_counter()\n    result = func(*args, **kwargs)\n    # Handle different return formats\n    if isinstance(result, tuple) and len(result) == 2:\n        move, n_expanded_nodes = result\n    else:",
        "detail": "src.utils.benchmark",
        "documentation": {}
    },
    {
        "label": "CELL_TYPES",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "CELL_TYPES = {\n  'EMPTY': '.',\n  'WALL': '#',\n  'PACMAN': 'V',\n  'GHOST': 'G',\n  'FOOD': 'o',\n}\n# Cardinal directions in (row, col) format\nDIRECTIONS = {\n  'U': (-1, 0),",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "DIRECTIONS",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "DIRECTIONS = {\n  'U': (-1, 0),\n  'D': (1, 0),\n  'L': (0, -1),\n  'R': (0, 1),\n  'UP': (-1, 0),\n  'DOWN': (1, 0),\n  'LEFT': (0, -1),\n  'RIGHT': (0, 1),\n}",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "GHOST_COLORS",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "GHOST_COLORS = {\n  'BLUE': (0, 0, 255),    # BFS\n  'PINK': (255, 192, 203), # DFS/IDDFS\n  'ORANGE': (255, 165, 0), # UCS\n  'RED': (255, 0, 0)       # A*\n}\n# Colors\nBLACK = (0, 0, 0)\nBLUE = (0, 0, 255)\nPINK = (255, 192, 203)",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "BLACK = (0, 0, 0)\nBLUE = (0, 0, 255)\nPINK = (255, 192, 203)\nORANGE = (255, 165, 0)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nWHITE = (255, 255, 255)\nGREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "BLUE = (0, 0, 255)\nPINK = (255, 192, 203)\nORANGE = (255, 165, 0)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nWHITE = (255, 255, 255)\nGREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "PINK",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "PINK = (255, 192, 203)\nORANGE = (255, 165, 0)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nWHITE = (255, 255, 255)\nGREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48\nINFO_HEIGHT = 60",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "ORANGE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "ORANGE = (255, 165, 0)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nWHITE = (255, 255, 255)\nGREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48\nINFO_HEIGHT = 60\n# Window dimensions",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "RED = (255, 0, 0)\nYELLOW = (255, 255, 0)\nWHITE = (255, 255, 255)\nGREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48\nINFO_HEIGHT = 60\n# Window dimensions\nWINDOW_WIDTH, WINDOW_HEIGHT = 1000, 800",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "YELLOW = (255, 255, 0)\nWHITE = (255, 255, 255)\nGREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48\nINFO_HEIGHT = 60\n# Window dimensions\nWINDOW_WIDTH, WINDOW_HEIGHT = 1000, 800\n# Font sizes",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "WHITE = (255, 255, 255)\nGREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48\nINFO_HEIGHT = 60\n# Window dimensions\nWINDOW_WIDTH, WINDOW_HEIGHT = 1000, 800\n# Font sizes\nFONT_SIZE = 20",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "GREY",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "GREY = (128, 128, 128)\nDARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48\nINFO_HEIGHT = 60\n# Window dimensions\nWINDOW_WIDTH, WINDOW_HEIGHT = 1000, 800\n# Font sizes\nFONT_SIZE = 20\nBIG_FONT_SIZE = 36",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "DARK_BLUE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "DARK_BLUE = (0, 0, 139)\n# Screen dimensions\nCELL_SIZE = 48\nINFO_HEIGHT = 60\n# Window dimensions\nWINDOW_WIDTH, WINDOW_HEIGHT = 1000, 800\n# Font sizes\nFONT_SIZE = 20\nBIG_FONT_SIZE = 36\nTITLE_FONT_SIZE = 48",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "CELL_SIZE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "CELL_SIZE = 48\nINFO_HEIGHT = 60\n# Window dimensions\nWINDOW_WIDTH, WINDOW_HEIGHT = 1000, 800\n# Font sizes\nFONT_SIZE = 20\nBIG_FONT_SIZE = 36\nTITLE_FONT_SIZE = 48\n# FPS\nFRAMES_PER_SECOND = 10",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "INFO_HEIGHT",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "INFO_HEIGHT = 60\n# Window dimensions\nWINDOW_WIDTH, WINDOW_HEIGHT = 1000, 800\n# Font sizes\nFONT_SIZE = 20\nBIG_FONT_SIZE = 36\nTITLE_FONT_SIZE = 48\n# FPS\nFRAMES_PER_SECOND = 10\n# Number levels",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "FONT_SIZE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "FONT_SIZE = 20\nBIG_FONT_SIZE = 36\nTITLE_FONT_SIZE = 48\n# FPS\nFRAMES_PER_SECOND = 10\n# Number levels\nNUM_LEVELS = 6\n# Sprite sheet dimensions\nSPRITE_SHEET_ROWS = 7\nSPRITE_SHEET_COLUMNS = 11",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "BIG_FONT_SIZE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "BIG_FONT_SIZE = 36\nTITLE_FONT_SIZE = 48\n# FPS\nFRAMES_PER_SECOND = 10\n# Number levels\nNUM_LEVELS = 6\n# Sprite sheet dimensions\nSPRITE_SHEET_ROWS = 7\nSPRITE_SHEET_COLUMNS = 11\nTILE_SIZE = 32",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "TITLE_FONT_SIZE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "TITLE_FONT_SIZE = 48\n# FPS\nFRAMES_PER_SECOND = 10\n# Number levels\nNUM_LEVELS = 6\n# Sprite sheet dimensions\nSPRITE_SHEET_ROWS = 7\nSPRITE_SHEET_COLUMNS = 11\nTILE_SIZE = 32\n# Ghost names",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "FRAMES_PER_SECOND",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "FRAMES_PER_SECOND = 10\n# Number levels\nNUM_LEVELS = 6\n# Sprite sheet dimensions\nSPRITE_SHEET_ROWS = 7\nSPRITE_SHEET_COLUMNS = 11\nTILE_SIZE = 32\n# Ghost names\nGHOST_NAMES = {\n    'BLUE': 'Blue Ghost',",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "NUM_LEVELS",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "NUM_LEVELS = 6\n# Sprite sheet dimensions\nSPRITE_SHEET_ROWS = 7\nSPRITE_SHEET_COLUMNS = 11\nTILE_SIZE = 32\n# Ghost names\nGHOST_NAMES = {\n    'BLUE': 'Blue Ghost',\n    'PINK': 'Pink Ghost',\n    'ORANGE': 'Orange Ghost',",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "SPRITE_SHEET_ROWS",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "SPRITE_SHEET_ROWS = 7\nSPRITE_SHEET_COLUMNS = 11\nTILE_SIZE = 32\n# Ghost names\nGHOST_NAMES = {\n    'BLUE': 'Blue Ghost',\n    'PINK': 'Pink Ghost',\n    'ORANGE': 'Orange Ghost',\n    'RED': 'Red Ghost',\n}",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "SPRITE_SHEET_COLUMNS",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "SPRITE_SHEET_COLUMNS = 11\nTILE_SIZE = 32\n# Ghost names\nGHOST_NAMES = {\n    'BLUE': 'Blue Ghost',\n    'PINK': 'Pink Ghost',\n    'ORANGE': 'Orange Ghost',\n    'RED': 'Red Ghost',\n}\n# Movement directions",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "TILE_SIZE",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "TILE_SIZE = 32\n# Ghost names\nGHOST_NAMES = {\n    'BLUE': 'Blue Ghost',\n    'PINK': 'Pink Ghost',\n    'ORANGE': 'Orange Ghost',\n    'RED': 'Red Ghost',\n}\n# Movement directions\nMOVEMENT_DIRECTIONS = {",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "GHOST_NAMES",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "GHOST_NAMES = {\n    'BLUE': 'Blue Ghost',\n    'PINK': 'Pink Ghost',\n    'ORANGE': 'Orange Ghost',\n    'RED': 'Red Ghost',\n}\n# Movement directions\nMOVEMENT_DIRECTIONS = {\n    'UP': 'UP',\n    'DOWN': 'DOWN',",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "MOVEMENT_DIRECTIONS",
        "kind": 5,
        "importPath": "src.utils.enums",
        "description": "src.utils.enums",
        "peekOfCode": "MOVEMENT_DIRECTIONS = {\n    'UP': 'UP',\n    'DOWN': 'DOWN',\n    'LEFT': 'LEFT',\n    'RIGHT': 'RIGHT',\n}",
        "detail": "src.utils.enums",
        "documentation": {}
    },
    {
        "label": "on_update",
        "kind": 2,
        "importPath": "src.utils.game_logic",
        "description": "src.utils.game_logic",
        "peekOfCode": "def on_update(map: Map, pacman: Pacman, ghosts: list[Ghost]):\n  ghosts_next_positions = []\n  total_expanded_nodes = 0\n  for ghost in ghosts:\n    next_position, expanded_nodes = ghost.moving_strategy(ghost.position, pacman.position, map, ghosts_next_positions)\n    ghost.update(next_position)\n    ghosts_next_positions.append(next_position)\n    if expanded_nodes is not None:\n      total_expanded_nodes += expanded_nodes\n  new_pacman_position = pacman.moving_strategy(pacman.position, map)",
        "detail": "src.utils.game_logic",
        "documentation": {}
    },
    {
        "label": "get_quads",
        "kind": 2,
        "importPath": "src.utils.get_quads",
        "description": "src.utils.get_quads",
        "peekOfCode": "def get_quads(sprite_sheet, \n              row=SPRITE_SHEET_ROWS, \n              column=SPRITE_SHEET_COLUMNS, \n              tile_size=TILE_SIZE) -> list:\n    quads = []\n    for i in range(row):\n        for j in range(column):\n            x = j * tile_size\n            y = i * tile_size\n            rect = pygame.Rect(x, y, tile_size, tile_size)",
        "detail": "src.utils.get_quads",
        "documentation": {}
    },
    {
        "label": "get_pacman_quads",
        "kind": 2,
        "importPath": "src.utils.get_quads",
        "description": "src.utils.get_quads",
        "peekOfCode": "def get_pacman_quads(quads) -> dict:\n    directions = [MOVEMENT_DIRECTIONS['LEFT'], \n                  MOVEMENT_DIRECTIONS['RIGHT'], \n                  MOVEMENT_DIRECTIONS['DOWN'],\n                  MOVEMENT_DIRECTIONS['UP']]\n    pacman_quads = {}\n    for i in range(4):\n        pacman_quads[directions[i]] = []\n        for j in range(2):\n            pacman_quads[directions[i]].append(quads[j * SPRITE_SHEET_COLUMNS + i])",
        "detail": "src.utils.get_quads",
        "documentation": {}
    },
    {
        "label": "get_ghost_quads",
        "kind": 2,
        "importPath": "src.utils.get_quads",
        "description": "src.utils.get_quads",
        "peekOfCode": "def get_ghost_quads(quads) -> dict:\n    directions = [MOVEMENT_DIRECTIONS['UP'], \n                  MOVEMENT_DIRECTIONS['DOWN'], \n                  MOVEMENT_DIRECTIONS['LEFT'],\n                  MOVEMENT_DIRECTIONS['RIGHT']]\n    ghost_names = [GHOST_NAMES['RED'], GHOST_NAMES['PINK'], GHOST_NAMES['BLUE'], GHOST_NAMES['ORANGE']]\n    ghost_quads = {}\n    for i in range(4):\n        ghost_quads[ghost_names[i]] = {}\n        for j in range(2, 6):",
        "detail": "src.utils.get_quads",
        "documentation": {}
    },
    {
        "label": "get_food_quads",
        "kind": 2,
        "importPath": "src.utils.get_quads",
        "description": "src.utils.get_quads",
        "peekOfCode": "def get_food_quads(quads) -> list:\n    food_quads = []\n    for i in range(4, 6):\n        for j in range(8, 11):\n            quad = quads[j * SPRITE_SHEET_COLUMNS + i]\n            food_quads.append(quad)\n    return food_quads",
        "detail": "src.utils.get_quads",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "src.utils.load_map",
        "description": "src.utils.load_map",
        "peekOfCode": "def load(file_path: str) -> tuple[list[str], tuple[int, int], list[tuple[int, int]]]:\n  with open(file_path, 'r') as file:\n    lines = file.readlines()\n    map_data = [line.strip() for line in lines]\n    map_data = [line.replace('\\n', '') for line in map_data]\n    map_data = [line.replace('\\r', '') for line in map_data]\n    pacman =  None\n    ghosts = []\n    for i, line in enumerate(map_data):\n      for j, cell in enumerate(line):",
        "detail": "src.utils.load_map",
        "documentation": {}
    },
    {
        "label": "PygameRenderer",
        "kind": 6,
        "importPath": "src.utils.pygame_renderer",
        "description": "src.utils.pygame_renderer",
        "peekOfCode": "class PygameRenderer:\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super(PygameRenderer, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n    def __init__(self):\n        self.screen = None\n        self.clock = pygame.time.Clock()\n        self.fps = FRAMES_PER_SECOND",
        "detail": "src.utils.pygame_renderer",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "src.utils.pygame_renderer",
        "description": "src.utils.pygame_renderer",
        "peekOfCode": "font = pygame.font.SysFont('Arial', FONT_SIZE)\nbig_font = pygame.font.SysFont('Arial', BIG_FONT_SIZE)\ntitle_font = pygame.font.SysFont('Arial', TITLE_FONT_SIZE, bold=True)\nclass PygameRenderer:\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super(PygameRenderer, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n    def __init__(self):",
        "detail": "src.utils.pygame_renderer",
        "documentation": {}
    },
    {
        "label": "big_font",
        "kind": 5,
        "importPath": "src.utils.pygame_renderer",
        "description": "src.utils.pygame_renderer",
        "peekOfCode": "big_font = pygame.font.SysFont('Arial', BIG_FONT_SIZE)\ntitle_font = pygame.font.SysFont('Arial', TITLE_FONT_SIZE, bold=True)\nclass PygameRenderer:\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super(PygameRenderer, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n    def __init__(self):\n        self.screen = None",
        "detail": "src.utils.pygame_renderer",
        "documentation": {}
    },
    {
        "label": "title_font",
        "kind": 5,
        "importPath": "src.utils.pygame_renderer",
        "description": "src.utils.pygame_renderer",
        "peekOfCode": "title_font = pygame.font.SysFont('Arial', TITLE_FONT_SIZE, bold=True)\nclass PygameRenderer:\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if cls._instance is None:\n            cls._instance = super(PygameRenderer, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n    def __init__(self):\n        self.screen = None\n        self.clock = pygame.time.Clock()",
        "detail": "src.utils.pygame_renderer",
        "documentation": {}
    },
    {
        "label": "to_string",
        "kind": 2,
        "importPath": "src.utils.renderer",
        "description": "src.utils.renderer",
        "peekOfCode": "def to_string(map, pacman, ghosts):\n  res = \"\"\n  ghosts_positions = [ghost.position for ghost in ghosts]\n  for i in range(map.N):\n    for j in range(map.M):\n      if (i, j) == pacman.position:\n        res += 'V'\n      elif (i, j) in ghosts_positions:\n        res += 'G'\n      else:",
        "detail": "src.utils.renderer",
        "documentation": {}
    },
    {
        "label": "console_render",
        "kind": 2,
        "importPath": "src.utils.renderer",
        "description": "src.utils.renderer",
        "peekOfCode": "def console_render(map: Map, pacman: Pacman, ghosts: list[Ghost]):\n  # clear screen\n  # os.system('cls' if os.name == 'nt' else 'clear')\n  print(\"Score:\", pacman.score)\n  print(\"Lives:\", pacman.lives)\n  print(to_string(map, pacman, ghosts))\n  if (pacman.lives <= 0):\n    print(\"-----------------------------------------------------------\")\n    print(\"------------------------- Game Over -----------------------\")\n    print(\"-----------------------------------------------------------\")",
        "detail": "src.utils.renderer",
        "documentation": {}
    },
    {
        "label": "on_render",
        "kind": 2,
        "importPath": "src.utils.renderer",
        "description": "src.utils.renderer",
        "peekOfCode": "def on_render(map: Map, pacman: Pacman, ghosts: list[Ghost]):\n  console_render(map, pacman, ghosts)",
        "detail": "src.utils.renderer",
        "documentation": {}
    },
    {
        "label": "subtract_tuple",
        "kind": 2,
        "importPath": "src.utils.subtract_tuple",
        "description": "src.utils.subtract_tuple",
        "peekOfCode": "def subtract_tuple(tuple1, tuple2):\n    return (tuple1[0] - tuple2[0], tuple1[1] - tuple2[1])",
        "detail": "src.utils.subtract_tuple",
        "documentation": {}
    },
    {
        "label": "initialize_level",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def initialize_level(level):\n    map_data, pacman_position, ghosts_positions = load('assets/maps/map3.txt')  \n    maze_map = Map(map_data)\n    ghosts = []\n    if level == 1:\n        pacman = Pacman(pacman_position, lambda pos, map: pos)\n        ghosts.append(Ghost(ghosts_positions[0], bfs, GHOST_NAMES['BLUE']))\n    elif level == 2:\n        pacman = Pacman(pacman_position, lambda pos, map: pos)\n        ghosts.append(Ghost(ghosts_positions[0], iddfs, GHOST_NAMES['PINK']))",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "run_game",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def run_game(level):\n    renderer = PygameRenderer()\n    maze_map, pacman, ghosts = initialize_level(level)\n    renderer.set_fps(60)\n    is_running = True\n    metrics = {\"search_time\": 0.0, \"expanded_nodes\": 0, \"memory_usage\": \"0 KB\"}\n    pacman_started_moving = level != 6\n    initial_position = pacman.position\n    while is_running:\n        keys = renderer.handle_events()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main():\n    renderer = PygameRenderer()\n    while True:\n        level = renderer.get_menu_input()\n        run_game(level)\nif __name__ == \"__main__\":\n    main()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "initialize_level",
        "kind": 2,
        "importPath": "src.pacman_game",
        "description": "src.pacman_game",
        "peekOfCode": "def initialize_level(level):\n    map_data, pacman_position, ghosts_positions = load('assets/maps/map3.txt')  \n    maze_map = Map(map_data)\n    ghosts = []\n    if level == 1:\n        pacman = Pacman(pacman_position, lambda pos, map: pos)\n        ghosts.append(Ghost(ghosts_positions[0], bfs, GHOST_NAMES['BLUE']))\n    elif level == 2:\n        pacman = Pacman(pacman_position, lambda pos, map: pos)\n        ghosts.append(Ghost(ghosts_positions[0], iddfs, GHOST_NAMES['PINK']))",
        "detail": "src.pacman_game",
        "documentation": {}
    },
    {
        "label": "run_game",
        "kind": 2,
        "importPath": "src.pacman_game",
        "description": "src.pacman_game",
        "peekOfCode": "def run_game(level):\n    renderer = PygameRenderer()\n    maze_map, pacman, ghosts = initialize_level(level)\n    renderer.set_fps(60)\n    is_running = True\n    metrics = {\"search_time\": 0.0, \"expanded_nodes\": 0, \"memory_usage\": \"0 KB\"}\n    pacman_started_moving = level != 6\n    initial_position = pacman.position\n    while is_running:\n        keys = renderer.handle_events()",
        "detail": "src.pacman_game",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.pacman_game",
        "description": "src.pacman_game",
        "peekOfCode": "def main():\n    renderer = PygameRenderer()\n    while True:\n        level = renderer.get_menu_input()\n        run_game(level)\nif __name__ == \"__main__\":\n    main()",
        "detail": "src.pacman_game",
        "documentation": {}
    }
]